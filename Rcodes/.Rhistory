library(astsa)
jj=read.csv(file.choose())  # read johnson&johnson.csv
#  Johnson and Johnson data are quarterly earnings, # hence it has frequency=4
time(jj)
cycle(jj)
plot(jj, ylab="Earnings per Share", main="J & J")
head(jj)
data("jj")
jj
time(jj)
cycle(jj)
plot(jj, ylab="Earnings per Share", main="J & J")
class(jj)
plot(jj, type="o", col="blue", lty="dashed")
plot(diff(log(jj)), main="logged and diffed")
plot.ts(x, main="plot.ts(x)")
k = c(.5,1,1,1,.5)        # k is the vector of weights
(k = k/sum(k))
fjj = filter(jj, sides=2, k)  # ?filter for help [but you knew that already]
plot(jj)
lines(fjj, col="red")         # adds a line to the existing plot
lines(lowess(jj), col="blue", lty="dashed")
dljj = diff(log(jj))        # difference the logged data
plot(dljj)                  # plot it (not shown)
shapiro.test(dljj)          # test for normality
par(mfrow=c(2,1))        # set up the graphics
hist(dljj, prob=TRUE, 12)   # histogram
lines(density(dljj))     # smooth it - ?density for details
qqnorm(dljj)             # normal Q-Q plot
qqline(dljj)             # add a line
lag1.plot(dljj, 4)       # correlation structure
acf2(dljj)
plot(dog <- stl(log(jj), "per"))
Q = factor(cycle(jj))        # make (Q)uarter factors
trend  = time(jj) - 1970          # not necessary to "center" time, but the results look nicer
reg = lm(log(jj)~ 0 + trend + Q, na.action=NULL)  # run the regression without an intercept
model.matrix(reg)
# plot of the observations and their fitted values:
plot(log(jj), type="o")    # the data in black
lines(fitted(reg), col=2)  # the fitted values in red
par( mfrow = c(2,1) )
plot( resid(reg) )       # residuals
acf( resid(reg), 20 )    # acf of the resids
sarima.for(jj, 10, 1, 1, 1)
# forecast gtemp for 10 years ahead based on an ARIMA(1,1,1)
# forecast gtemp for 10 years ahead based on an ARIMA(1,1,1)
# forecast gtemp for 10 years ahead based on an ARIMA(1,1,1)
library(tidyverse)
library(anomalize)
tidyverse_cran_downloads_anomalized <- tidyverse_cran_downloads %>%
time_decompose(count, merge = TRUE) %>%
anomalize(remainder) %>%
time_recompose()
tidyverse_cran_downloads_anomalized %>%
plot_anomalies(ncol = 3, alpha_dots = 0.25)
lubridate_daily_downloads <- tidyverse_cran_downloads %>%
filter(package == "lubridate") %>%
ungroup()
lubridate_daily_downloads
lubridate_daily_downloads_anomalized <- lubridate_daily_downloads %>%
time_decompose(count) %>%
anomalize(remainder) %>%
time_recompose()
p1 <- lubridate_daily_downloads_anomalized %>%
plot_anomaly_decomposition() +
ggtitle("Freq/Trend = 'auto'")
p1
devtools::install_github("petermeissner/wikipediatrend")
devtools::install_github("twitter/AnomalyDetection")
library(wikipediatrend) ## Library containing API wikipedia access
library(AnomalyDetection)
library(ggplot2)
## Download wiki webpage "fifa"
fifa_data = wp_trend("fifa", from="2013-03-18", lang = "en")
## Plotting data
ggplot(fifa_data, aes(x=date, y=count, color=count)) + geom_line()
head(fifa_data)
## Plotting data
ggplot(fifa_data, aes(x=date, y=views, color=views)) + geom_line()
## Convert date variable
fifa_data$date = as.POSIXct(fifa_data$date)
## Keep only desiered variables (date & page views)
fifa_data=fifa_data[,c(7,8)]
## Apply anomaly detection
data_anomaly = AnomalyDetectionTs(fifa_data, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
head(fifa_data)
nrow(fifa_data)
## Apply anomaly detection
data_anomaly = AnomalyDetectionTs(fifa_data, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
class(fifa_data)
class(fifa_data$data)
class(fifa_data$date)
fifa_data$date <- as.POSIXct(strptime(fifa_data$date, "%Y-%m-%d %H:%M", tz = "UTC"))
data_anomaly <- AnomalyDetectionTs(fifa_data, max_anoms=0.01, threshold = "None",
direction='pos', plot=TRUE, only_last = "day", e_value = TRUE)
## Download wiki webpage "fifa"
fifa_data = wp_trend("fifa", from="2013-03-18", lang = "en")
## Plotting data
ggplot(fifa_data, aes(x=date, y=views, color=views)) + geom_line()
fifa_data$date <- as.POSIXct(strptime(fifa_data$date, "%Y-%m-%d %H:%M:%S", tz = "UTC"))
## Keep only desiered variables (date & page views)
fifa_data=fifa_data[,c(7,8)]
data_anomaly <- AnomalyDetectionTs(fifa_data, max_anoms=0.01,
direction='pos', plot=TRUE, e_value = TRUE)
data_anomaly <- AnomalyDetectionTs(fifa_data, max_anoms=0.2,
direction='pos', plot=TRUE, e_value = TRUE)
